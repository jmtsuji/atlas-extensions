#!/bin/bash
# Created Dec 18, 2017
# Copyright Jackson M. Tsuji (Neufeld lab PhD student), 2018
# Description: Wrapper to run ATLAS in a Docker container

# Basic script stuff (Buffalo, 2015):
set -e
set -u
set -o pipefail

script_version=1.0.0
date_code=$(date '+%y%m%d')

# If input field is empty, print help and end script
if [ $# == 0 ]
then
	printf "\n$(basename $0): wrapper to start a Docker container with ATLAS-coassembly (for metagenome processing).\n"
	printf "Version: ${script_version}\n"
	printf "Contact Jackson Tsuji (jackson.tsuji@uwaterloo.ca; Neufeld research group) for error reports or feature requests.\n\n"
	printf "Usage: $(basename $0) /path/to/database/directory /path/to/output/directory\n\n"
	printf "Usage notes:\n"
	printf "1. /path/to/database/directory: i.e., the database folder downloaded by ATLAS.\n"
	printf "2. /path/to/output/directory: the directory containing output from the original ATLAS run to be coassembled.\n\n"
	printf "Note that these directories are mapped to new directory paths within the docker container:\n"
	printf "1. /path/to/database/directory --> /home/atlas/databases\n"
	printf "2. /path/to/output/directory --> /home/atlas/output\n"
	printf "Keep this in mind when specifying file locations within the Docker container.\n\n"
	printf "Example workflow (see README.md for more details):\n"
	printf "A. First, run ATLAS normally (outside this coassembly container) on your samples (e.g., using the enter-atlas container)."
	printf "B. Make config.yaml file (CONFIG_FILEPATH.yaml should be a file that does not yet exist that you want to write): co-assembly.sh /home/atlas/output /home/atlas/databases [CONFIG_FILEPATH.yaml] [COASSEMBLY_GUIDE_FILEPATH.tsv] [THREADS]\n"
	printf "C. Run coassembly (CONFIG_FILEPATH.yaml should be your desired .yaml file): co-assembly.sh /home/atlas/output /home/atlas/databases [CONFIG_FILEPATH.yaml] [COASSEMBLY_GUIDE_FILEPATH.tsv] [THREADS]\n\n"
	exit 1
fi

#################################################################
##### Settings: #################################################
database_dir=$(realpath $1)
output_dir=$(realpath $2)
atlas_image_name="pnnl/atlas:1.0.22-coassembly-r3" # for docker to build and run; hard-coded for now
atlas_image_source="https://github.com/jmtsuji/atlas-extensions.git#improved_docker" # for docker to build from; hard-coded for now
#################################################################

function test_directories {
	# Description: tests that the input directories exist

	# Test that /path/to/output/directory exists, and exit if it does not
	if [ ! -d ${output_dir} ]; then
	# From http://stackoverflow.com/a/4906665, accessed Feb. 4, 2017
		print "Did not find output directory at '${output_dir}'. Job terminating."
		exit 1
	fi
	
	# Test that /path/to/database/directory exists, and exit if it does not
	if [ ! -d ${database_dir} ]; then
	# From http://stackoverflow.com/a/4906665, accessed Feb. 4, 2017
		print "Did not find database directory at '${database_dir}'. Job terminating."
		exit 1
	fi
}

function setup_atlas {
	# Description: builds the ATLAS container with a specific tag. Doesn't rebuild if the container is already made.
	
	echo "Installing ATLAS docker container (if not already installed; could take several minutes on first run)..."
		
	docker build -t ${atlas_image_name} ${atlas_image_source} # > /dev/null 2>&1
	echo ""
	
}

function start_atlas {
	# Description: starts the container
	
	docker run -v ${database_dir}:/home/atlas/databases \
	-v ${output_dir}:/home/atlas/output \
	-it ${atlas_image_name} /bin/bash
	
}

function main {
	echo "Running $(basename $0) version $script_version on ${date_code} (yymmdd). Starting ATLAS container..."
	echo ""
	
	test_directories
	setup_atlas
	
	start_time=$(date)
	start_atlas
	end_time=$(date)
	
	echo ""
	echo ""
	echo "$(basename $0): finished."
	echo "Container started at ${start_time} and closed at ${end_time}."
	echo ""

}

main
